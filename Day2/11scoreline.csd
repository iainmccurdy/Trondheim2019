; The scoreline opcode allows us to embed chunks of score events within an instrument and to then trigger them from within an instrument.
; This allows us to create canons and loops through the use of repetition.
; The score events should be bounded by double curly brackets {{ }}
; The trigger can be generated by many means. The 'metro' opcode is one example.

; This example also demonstrates how to use a global variable that can be shared between different instruments.

<CsoundSynthesizer>

<CsInstruments>

nchnls = 2 ; stereo
0dbfs = 1


instr   1
ktrig    metro   1/8   ; create a metronome trigger. Its rate of repetition is timed to correspond with the length of the score melody below:
; create the 'scoreline' event
scoreline {{
i 2 0    0.3 40
i 2 0.25 0.3 42
i 2 0.5  0.3 43
i 2 0.75 0.3 45
i 2 1.00 0.3 47
i 2 1.25 0.3 43
i 2 1.50 0.3 47
i 2 2.00 0.3 46
i 2 2.25 0.3 42
i 2 2.50 0.3 46
i 2 3.00 0.3 45
i 2 3.25 0.3 41
i 2 3.50 0.3 45
i 2 4.00 0.3 40
i 2 4.25 0.3 42
i 2 4.5  0.3 43
i 2 4.75 0.3 45 
i 2 5.00 0.3 47
i 2 5.25 0.3 43
i 2 5.50 0.3 47
i 2 5.75 0.3 52
i 2 6.00 0.3 50
i 2 6.25 0.3 47
i 2 6.50 0.3 43
i 2 6.75 0.3 47
i 2 7.00 1.2 50
}}, ktrig

; a filter cutoff is created as a global variable (starts with a g) so that the entire melody slowly builds and decays in timbre.
gkfilt   expseg  200, 20, 12000, 20, 200

endin

instr   2
kenv    expon      1, p3, 0.001              ; percussive decay envelope
asig    vco2       0.4 * kenv, cpsmidinn(p4) ; a sawtooth oscillator
aCF     expon      i(gkfilt), p3, 20         ; create the filter cutoff envelope. i() converts a k-rate variable to i-rate.
asig    butlp      asig, aCF                 ; lowpass filter the sawtooth
        outs       asig, asig                ; send audio to the speakers
        chnmix     asig * 0.3, "send"        ; also send some audio to the reverb instruemnt via a 'channel'
endin

instr   99
ain     chnget     "send"                    ; read in the sent audio
aL,aR   reverbsc   ain, ain, 0.85, 4000      ; reverberate the audio
        outs       aL, aR                    ; send the reverb to the output
        chnclear   "send"                    ; clear the audio channel
endin


</CsInstruments>

<CsScore>
i 1  0 3600 ; play the melody (the instrument triggers instr 2 which actually produces sound)
i 99 0 3600 ; reverb instrument
</CsScore>

</CsoundSynthesizer>
<bsbPanel>
 <label>Widgets</label>
 <objectName/>
 <x>100</x>
 <y>100</y>
 <width>320</width>
 <height>240</height>
 <visible>true</visible>
 <uuid/>
 <bgcolor mode="nobackground">
  <r>255</r>
  <g>255</g>
  <b>255</b>
 </bgcolor>
</bsbPanel>
<bsbPresets>
</bsbPresets>
